# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bettermq_pb2 as bettermq__pb2


class PriorityQueueStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enqueue = channel.unary_unary(
                '/bettermq.PriorityQueue/Enqueue',
                request_serializer=bettermq__pb2.EnqueueRequest.SerializeToString,
                response_deserializer=bettermq__pb2.EnqueueReply.FromString,
                )
        self.Dequeue = channel.unary_unary(
                '/bettermq.PriorityQueue/Dequeue',
                request_serializer=bettermq__pb2.DequeueRequest.SerializeToString,
                response_deserializer=bettermq__pb2.DequeueReply.FromString,
                )
        self.Ack = channel.unary_unary(
                '/bettermq.PriorityQueue/Ack',
                request_serializer=bettermq__pb2.AckRequest.SerializeToString,
                response_deserializer=bettermq__pb2.AckReply.FromString,
                )
        self.Nack = channel.unary_unary(
                '/bettermq.PriorityQueue/Nack',
                request_serializer=bettermq__pb2.NackRequest.SerializeToString,
                response_deserializer=bettermq__pb2.NackReply.FromString,
                )
        self.GetActiveTopics = channel.unary_unary(
                '/bettermq.PriorityQueue/GetActiveTopics',
                request_serializer=bettermq__pb2.GetActiveTopicsRequest.SerializeToString,
                response_deserializer=bettermq__pb2.GetActiveTopicsReply.FromString,
                )


class PriorityQueueServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enqueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dequeue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Nack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PriorityQueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enqueue': grpc.unary_unary_rpc_method_handler(
                    servicer.Enqueue,
                    request_deserializer=bettermq__pb2.EnqueueRequest.FromString,
                    response_serializer=bettermq__pb2.EnqueueReply.SerializeToString,
            ),
            'Dequeue': grpc.unary_unary_rpc_method_handler(
                    servicer.Dequeue,
                    request_deserializer=bettermq__pb2.DequeueRequest.FromString,
                    response_serializer=bettermq__pb2.DequeueReply.SerializeToString,
            ),
            'Ack': grpc.unary_unary_rpc_method_handler(
                    servicer.Ack,
                    request_deserializer=bettermq__pb2.AckRequest.FromString,
                    response_serializer=bettermq__pb2.AckReply.SerializeToString,
            ),
            'Nack': grpc.unary_unary_rpc_method_handler(
                    servicer.Nack,
                    request_deserializer=bettermq__pb2.NackRequest.FromString,
                    response_serializer=bettermq__pb2.NackReply.SerializeToString,
            ),
            'GetActiveTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveTopics,
                    request_deserializer=bettermq__pb2.GetActiveTopicsRequest.FromString,
                    response_serializer=bettermq__pb2.GetActiveTopicsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bettermq.PriorityQueue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PriorityQueue(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enqueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bettermq.PriorityQueue/Enqueue',
            bettermq__pb2.EnqueueRequest.SerializeToString,
            bettermq__pb2.EnqueueReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Dequeue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bettermq.PriorityQueue/Dequeue',
            bettermq__pb2.DequeueRequest.SerializeToString,
            bettermq__pb2.DequeueReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bettermq.PriorityQueue/Ack',
            bettermq__pb2.AckRequest.SerializeToString,
            bettermq__pb2.AckReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Nack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bettermq.PriorityQueue/Nack',
            bettermq__pb2.NackRequest.SerializeToString,
            bettermq__pb2.NackReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActiveTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bettermq.PriorityQueue/GetActiveTopics',
            bettermq__pb2.GetActiveTopicsRequest.SerializeToString,
            bettermq__pb2.GetActiveTopicsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
